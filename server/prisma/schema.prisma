// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  phone            String
  otpCode          String
  isActive         Boolean   @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  salon            Salon?    @relation(fields: [salonId], references: [id])
  salonId          String?

  @@map("users")
}

model Salon {
  id           String         @id @default(uuid())
  companyName  String
  document     String
  description  String
  zipcode      Float
  address      String
  district     String
  city         String
  state        String
  number       Int
  latitude     String
  longitude    String
  User         User[]
  SalonSegment SalonSegment[]
  OpeningHour  OpeningHour[]
  SocialMedia  SocialMedia[]
  categories   Category[]
  Employee     Employee[]

  @@map("salons")
}

model Segment {
  id           String         @id @default(uuid())
  name         String
  SalonSegment SalonSegment[]

  @@map("segments")
}

model SalonSegment {
  id        String  @id @default(uuid())
  salon     Salon   @relation(fields: [salonId], references: [id])
  salonId   String
  segment   Segment @relation(fields: [segmentId], references: [id])
  segmentId String

  @@map("salonsegments")
}

model OpeningHour {
  id        String @id @default(uuid())
  weekDay   String
  startTime String
  endTime   String
  salon     Salon  @relation(fields: [salonId], references: [id])
  salonId   String

  @@map("openinghours")
}

model SocialMedia {
  id      String @id @default(uuid())
  url     String
  name    String
  salon   Salon  @relation(fields: [salonId], references: [id])
  salonId String

  @@map("socialmedias")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  services Service[]
  salon    Salon?    @relation(fields: [salonId], references: [id])
  salonId  String?

  @@map("categories")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String
  minValue    Float
  maxValue    Float
  averageTime Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String

  @@map("services")
}

model Employee {
  id                  String                @id @default(uuid())
  name                String
  email               String
  address             String
  number              Int
  complement          String
  district            String
  zipcode             String
  city                String
  state               String
  salon               Salon                 @relation(fields: [salonId], references: [id])
  salonId             String
  EmployeeOpeningHour EmployeeOpeningHour[]

  @@map("employees")
}

model EmployeeOpeningHour {
  id         String   @id @default(uuid())
  weekDay    String
  startTime  String
  endTime    String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  @@map("employeeopeninghours")
}

model Product {
  id   String @id @default(uuid())
  name String

  @@map("products")
}
